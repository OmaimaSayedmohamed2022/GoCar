import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
import User from '../models/userModel.js'

dotenv.config();

//  Nodemailer mailtrap
const transporter = nodemailer.createTransport({
   
    host: 'sandbox.smtp.mailtrap.io',
    port: 587,
    auth: {
        user: process.env.E_USER,
        pass: process.env.E_PASSWORD,
    },
});

//  Request password reset
export const requestPasswordReset = async (req, res) => {
    try{
    const { email } = req.body;

    const resetToken = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: '30h' });

    await transporter.sendMail({
        to: email,
        subject: "Password Reset Code",
        text: `Your password reset code is: ${resetToken}`,
    });

  return  res.status(200).json({ message: "Reset code sent to your email" });
}catch(error){
    res.status(500).json({ message: " error in Reset code sent to your email",error:error.message });
    console.log({ message: " error in Reset code sent to your email",error:error.message })
}
};

//  Verify the code
export const verifyCode = (req, res) => {
    const { email} = req.body;
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.startsWith('Bearer ') ? authHeader.split(' ')[1] : null;

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        if (decoded.email !== email) throw new Error();
        
        res.status(200).json({ message: "Code verified" });
    } catch (error) {
        res.status(500).json({ message: "Invalid or expired code" });
    }
};

//  Reset Password
export const resetPassword = async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        

        const hashedPassword = await bcrypt.hash(password, 10);
        
        user.password = hashedPassword;

        await user.save();

        res.status(200).json({ message: "Password has been reset successfully" });
    } catch (error) {
        res.status(500).json({ message: "Error resetting password", error: error.message });
    }
};


